#!/bin/bash

# You can use TOOLCHAIN_PATH variable to point to your preferable toolchain location.
# If it's not specified your toolchain will be at the same level as the project.
# It's set by TOOLCHAIN_DEFAULT_PATH

# Please notice:
# When you submit a new toolchain and you want it working with the current script
# then your toolchain has to be a tar archive with the root in TOOLCHAIN_PATH.
# Please take a look at *toolchain_get* function.
# You also need to update *TOOLCHAIN_MAP* with its target path and archive.

WORK_DIR=$(pwd)
# TOOLCHAIN_PATH="path to your toolchain"
TOOLCHAIN_DEFAULT_PATH="../toolchain"
TOOLCHAIN_GIT_REPO="https://gitee.com/msntec/arm-gcc-toolchain.git"

MISSING_PACKETS=()

#MAKE_PATH="GnuWin32"
JLINK_PATH="SEGGER/JLink"
STTOOLS_PATH="stlink-1.7.0-x86_64-w64-mingw32"
STM32_PATH="xpack-arm-none-eabi-gcc-10.3.1-2.3"
OPENOCD_PATH="xpack-openocd-0.11.0-3"

declare -A TOOLCHAIN_MAP=(
    #[$MAKE_PATH]="GnuWin32.tar.bz2"
    [$JLINK_PATH]="SEGGER.tar.bz2"
    [$STM32_PATH]="xpack-arm-none-eabi-gcc-10.3.1-2.3.tar.bz2"
    [$STTOOLS_PATH]="stlink-1.7.0-x86_64-w64-mingw32.tar.bz2"
    [$OPENOCD_PATH]="xpack-openocd-0.11.0-3.tar.bz2"
)

function toolchain_sparse {
    echo "" > .git/info/sparse-checkout
    for module in "${TOOLCHAIN_MAP[@]}"; do
        echo $module >> .git/info/sparse-checkout
    done

	if [[ $TOOLCHAIN_GIT_REPO == "https://gitee.com/msntec/arm-gcc-toolchain.git" ]]; then
		echo xpack-arm-none-eabi-gcc-10.3.1-2.3.tar.bz2_0 >> .git/info/sparse-checkout
		echo xpack-arm-none-eabi-gcc-10.3.1-2.3.tar.bz2_1 >> .git/info/sparse-checkout
	fi
}

function toolchain_checkout {
    mkdir -p $TOOLCHAIN_PATH
    cd $TOOLCHAIN_PATH
    if [[ -d .git ]]; then
        toolchain_sparse
        echo "update toolchain repository"
        # git read-tree -mu
        git stash
        git checkout master
        git pull origin master
    else
        echo "clone toolchain repository"
        echo "Get your coffee. I might take a while..."
        echo ""
        echo "   ( ("
        echo "    ) )"
        echo "  ........"
        echo "  |      |]"
        echo "  \      /"
        echo "   \`----'"
        echo ""
        git init
        git config core.sparseCheckout true
        toolchain_sparse
        # cat .git/info/sparse-checkout > checkedout.log
        git remote add -f origin $TOOLCHAIN_GIT_REPO
        git pull origin master
   fi
   git rev-parse HEAD
   git status
   if [[ $TOOLCHAIN_GIT_REPO == "https://gitee.com/msntec/arm-gcc-toolchain.git" ]]; then
       cat xpack-arm-none-eabi-gcc-10.3.1-2.3.tar.bz2_* > xpack-arm-none-eabi-gcc-10.3.1-2.3.tar.bz2
   fi
   cd $WORK_DIR
}

toolchain_get () {
    echo "Updating toolchain"
    toolchain_checkout
    echo ${MISSING_PACKETS[@]}
    cd $TOOLCHAIN_PATH
    for tool in ${MISSING_PACKETS[@]}; do
        echo "Extracting $tool"
        tar -xf $tool
    done
    cd $WORK_DIR
}

toolchain_check () {
    MISSING_PACKETS=()
    echo "Check installed toolchains"
    for dir in ${!TOOLCHAIN_MAP[@]}; do
        if [[ ! -d $TOOLCHAIN_PATH/$dir ]]; then
            # echo "$TOOLCHAIN_PATH/$dir is missing"
            MISSING_PACKETS+=(${TOOLCHAIN_MAP[$dir]})
        # else
        #     echo "$TOOLCHAIN_PATH/$dir is there"
        fi
    done
    if [[ ${#MISSING_PACKETS[@]} != 0 ]]; then
        echo "Missing ${#MISSING_PACKETS[@]} packets:"
        echo "    ${MISSING_PACKETS[@]}"
    fi
}

#Check environment before the beginning
if [[ "$ENV_CONFIG_DONE" != "Done" ]]; then
	if [[ ! -d $TOOLCHAIN_PATH ]]; then
		if [[ $TOOLCHAIN_PATH != $TOOLCHAIN_DEFAULT_PATH ]]; then
			echo "There is no folder \"$TOOLCHAIN_PATH\""
			echo "Setting default toolchain path \"$TOOLCHAIN_DEFAULT_PATH\""
			TOOLCHAIN_PATH="$(readlink -f $TOOLCHAIN_DEFAULT_PATH)"
		fi
	fi

	echo "looking at $TOOLCHAIN_PATH"
	toolchain_check
	if [[ ${#MISSING_PACKETS[@]} != 0 ]]; then
		toolchain_get
		toolchain_check
		if [[ ${#MISSING_PACKETS[@]} != 0 ]]; then
			echo "Somethimg wrong with toolchain folder or repository"
			return
		fi
	fi

	export TZ="CET-1CEST"

	export PATH="${PATH}:$TOOLCHAIN_PATH/$STTOOLS_PATH/bin"
	export PATH="${PATH}:$TOOLCHAIN_PATH/$STM32_PATH/bin"
	export PATH="${PATH}:$TOOLCHAIN_PATH/$OPENOCD_PATH/bin"
	#export PATH="${PATH}:$TOOLCHAIN_PATH/$MAKE_PATH/bin"
	export PATH="${PATH}:$TOOLCHAIN_PATH/$JLINK_PATH"
	export CROSSCOMPDIR="$TOOLCHAIN_PATH/xpack-arm-none-eabi-gcc-10.3.1-2.3"
	export ENV_CONFIG_DONE="Done"
fi
echo "Toolchain is already installed!!!"
